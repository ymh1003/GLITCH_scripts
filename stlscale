#!/usr/bin/env python3

import sys
import os
import argparse
from stl import mesh
import trimesh
import math

from stlinfo import STLFile

# adopt code from stlinfo
# scale the model to fit the build plate

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Scale STL file")
    p.add_argument("stlfile")
    p.add_argument("--volume", "-v", default="300,300,250", help="Build volume of x,y,z")
    args = p.parse_args()
    
    orig_mesh = trimesh.load(args.stlfile)
    scaled_mesh = orig_mesh
    
    base_name = os.path.splitext(os.path.basename(args.stlfile))[0]
    output_filepath = os.path.join(os.path.dirname(args.stlfile), f"{base_name}_scaled.stl")
    
    x, y, z = tuple([float(b) for b in args.volume.split(",")])
    
    f = STLFile()
    f.load_file(args.stlfile)
    minp, maxp = f.bounds()
    
    if not f.fits((minp, maxp), x, y, z, False):  # need to scale the mesh
        px = maxp.x - minp.x + 1
        py = maxp.y - minp.y + 1
        pz = maxp.z - minp.z + 1
        
        scale = math.ceil(max([px / x, py / y, pz / z]))
        scaled_mesh.apply_scale(1 / scale)  # uniform scaling
    
    scaled_mesh.export(output_filepath)
   
   